  public static void SelectionSort(int[]);
    descriptor: ([I)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=4, locals=4, args_size=1
         0: iconst_0                // Push int constant 0 to stack - From here to 1 is 'int i = 0'
         1: istore_1                // Pop from stack and store in local variable 1 - Local variable 1 is 'i'
         2: iload_1                 // Push local variable 1 to stack - From here to 5 is 'i < arr.length'
         3: aload_0                 // Object reference at local variable 0 is pushed to stack
         4: arraylength             // Pop array reference from stack and push length of the array to stack
         5: if_icmpge     57        // Pop two values from stack, compare and jump to 57 if greater than or equal to
         8: iload_1                 // Push local variable 1 to stack - From here to 9 is 'int least = i'
         9: istore_2                // Pop from stack and store in local variable 2 - Local variable 2 is 'least'
        10: iload_1                 // Push local variable 1 to stack - From here to 13 is 'int j = i+1'
        11: iconst_1                // Push int constant 1 to stack
        12: iadd                    // Pop two values from stack, add them together and push the result to the stack
        13: istore_3                // Pop from stack and store in local variable 3 - Local variable 3 is 'j'
        14: iload_3                 // Push local variable 3 to stack - From here to 17 is 'j < arr.length'
        15: aload_0                 // Object reference at local variable 0 is pushed to stack
        16: arraylength             // Pop array reference from stack and push length of the array to stack
        17: if_icmpge     37        // Pop two values from stack, compare and jump to 37 if greater than or equal to
        20: aload_0                 // Object reference at local variable 0 is pushed to stack - From here to 26 is 'if (arr[j] < arr[least])'
        21: iload_3                 // Push local variable 3 to stack
        22: iaload                  // Pop array reference and index from stack and push array element at index to stack
        23: aload_0                 // Object reference at local variable 0 is pushed to stack
        24: iload_2                 // Push local variable 2 to stack
        25: iaload                  // Pop array reference and index from stack and push array element at index to stack
        26: if_icmpge     31        // Pop two values from stack, compare and jump to 31 if greater than or equal to
        29: iload_3                 // Push local variable 3 to stack - From here to 30 is 'least = j'
        30: istore_2                // Pop from stack and store in local variable 2
        31: iinc          3, 1      // Increment local variable 3 by constant 1 - 'j++'
        34: goto          14        // Go to 14
        37: aload_0                 // Object reference at local variable 0 is pushed to stack - From here to 40 is 'int tmp = arr[i]
        38: iload_1                 // Push local variable 1 to stack
        39: iaload                  // Pop array reference and index from stack and push array element at index to stack
        40: istore_3                // Pop from stack and store in local variable 3 - Local variable 3 is 'tmp'
        41: aload_0                 // Object reference at local variable 0 is pushed to stack - From here to 46 is 'arr[i] = arr[least]'
        42: iload_1                 // Push local variable 1 to stack
        43: aload_0                 // Object reference at local variable 0 is pushed to stack
        44: iload_2                 // Push local variable 2 to stack
        45: iaload                  // Pop array reference and index from stack and push array element at index to stack
        46: iastore                 // Pop array reference, index and value from stack and store value at index in the array referenced
        47: aload_0                 // Object reference at local variable 0 is pushed to stack - From here to 50 is 'arr[least] = tmp'
        48: iload_2                 // Push local variable 2 to stack
        49: iload_3                 // Push local variable 3 to stack
        50: iastore                 // Pop array reference, index and value from stack and store value at index in the array referenced
        51: iinc          1, 1      // Increment local variable 1 by constant 1 - 'i++'
        54: goto          2         // Go to 2
        57: return                  // Return void
      LineNumberTable:
        line 21: 0
        line 22: 8
        line 23: 10
        line 24: 20
        line 25: 29
        line 23: 31
        line 26: 37
        line 21: 51
        line 28: 57
      StackMapTable: number_of_entries = 5
        frame_type = 252 /* append */
          offset_delta = 2
          locals = [ int ]
        frame_type = 253 /* append */
          offset_delta = 11
          locals = [ int, int ]
        frame_type = 16 /* same */
        frame_type = 250 /* chop */
          offset_delta = 5
        frame_type = 249 /* chop */
          offset_delta = 19
