// Implementation file for parser generated by fsyacc
module CPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "CPar.fsy"

(*	File MicroC/CPar.fsy 
	Parser specification for micro-C, a small imperative language
	sestoft@itu.dk * 2009-09-29
	No (real) shift/reduce conflicts thanks to Niels Kokholm.
*)

open Absyn

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = CstI 10

# 19 "CPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | AMP
  | COLON
  | QUESTION
  | NOT
  | SEQOR
  | SEQAND
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | INCR
  | DECR
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | CHAR
  | ELSE
  | IF
  | INT
  | NULL
  | PRINT
  | PRINTLN
  | RETURN
  | VOID
  | WHILE
  | FOR
  | SWITCH
  | CASE
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTINT of (int)
  | CSTBOOL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_COLON
    | TOKEN_QUESTION
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_INCR
    | TOKEN_DECR
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_INT
    | TOKEN_NULL
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_RETURN
    | TOKEN_VOID
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_SWITCH
    | TOKEN_CASE
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Vardec
    | NONTERM_Vardesc
    | NONTERM_Fundec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Block
    | NONTERM_StmtOrDecSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_Cases
    | NONTERM_Cases1
    | NONTERM_Case
    | NONTERM_StmtU
    | NONTERM_Expr
    | NONTERM_ExprNotAccess
    | NONTERM_AtExprNotAccess
    | NONTERM_Access
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const
    | NONTERM_Type

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | LBRACE  -> 3 
  | RBRACE  -> 4 
  | LBRACK  -> 5 
  | RBRACK  -> 6 
  | SEMI  -> 7 
  | COMMA  -> 8 
  | ASSIGN  -> 9 
  | AMP  -> 10 
  | COLON  -> 11 
  | QUESTION  -> 12 
  | NOT  -> 13 
  | SEQOR  -> 14 
  | SEQAND  -> 15 
  | EQ  -> 16 
  | NE  -> 17 
  | GT  -> 18 
  | LT  -> 19 
  | GE  -> 20 
  | LE  -> 21 
  | INCR  -> 22 
  | DECR  -> 23 
  | PLUS  -> 24 
  | MINUS  -> 25 
  | TIMES  -> 26 
  | DIV  -> 27 
  | MOD  -> 28 
  | CHAR  -> 29 
  | ELSE  -> 30 
  | IF  -> 31 
  | INT  -> 32 
  | NULL  -> 33 
  | PRINT  -> 34 
  | PRINTLN  -> 35 
  | RETURN  -> 36 
  | VOID  -> 37 
  | WHILE  -> 38 
  | FOR  -> 39 
  | SWITCH  -> 40 
  | CASE  -> 41 
  | CSTSTRING _ -> 42 
  | NAME _ -> 43 
  | CSTINT _ -> 44 
  | CSTBOOL _ -> 45 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_LBRACE 
  | 4 -> TOKEN_RBRACE 
  | 5 -> TOKEN_LBRACK 
  | 6 -> TOKEN_RBRACK 
  | 7 -> TOKEN_SEMI 
  | 8 -> TOKEN_COMMA 
  | 9 -> TOKEN_ASSIGN 
  | 10 -> TOKEN_AMP 
  | 11 -> TOKEN_COLON 
  | 12 -> TOKEN_QUESTION 
  | 13 -> TOKEN_NOT 
  | 14 -> TOKEN_SEQOR 
  | 15 -> TOKEN_SEQAND 
  | 16 -> TOKEN_EQ 
  | 17 -> TOKEN_NE 
  | 18 -> TOKEN_GT 
  | 19 -> TOKEN_LT 
  | 20 -> TOKEN_GE 
  | 21 -> TOKEN_LE 
  | 22 -> TOKEN_INCR 
  | 23 -> TOKEN_DECR 
  | 24 -> TOKEN_PLUS 
  | 25 -> TOKEN_MINUS 
  | 26 -> TOKEN_TIMES 
  | 27 -> TOKEN_DIV 
  | 28 -> TOKEN_MOD 
  | 29 -> TOKEN_CHAR 
  | 30 -> TOKEN_ELSE 
  | 31 -> TOKEN_IF 
  | 32 -> TOKEN_INT 
  | 33 -> TOKEN_NULL 
  | 34 -> TOKEN_PRINT 
  | 35 -> TOKEN_PRINTLN 
  | 36 -> TOKEN_RETURN 
  | 37 -> TOKEN_VOID 
  | 38 -> TOKEN_WHILE 
  | 39 -> TOKEN_FOR 
  | 40 -> TOKEN_SWITCH 
  | 41 -> TOKEN_CASE 
  | 42 -> TOKEN_CSTSTRING 
  | 43 -> TOKEN_NAME 
  | 44 -> TOKEN_CSTINT 
  | 45 -> TOKEN_CSTBOOL 
  | 48 -> TOKEN_end_of_input
  | 46 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Topdec 
    | 5 -> NONTERM_Topdec 
    | 6 -> NONTERM_Vardec 
    | 7 -> NONTERM_Vardesc 
    | 8 -> NONTERM_Vardesc 
    | 9 -> NONTERM_Vardesc 
    | 10 -> NONTERM_Vardesc 
    | 11 -> NONTERM_Vardesc 
    | 12 -> NONTERM_Fundec 
    | 13 -> NONTERM_Fundec 
    | 14 -> NONTERM_Paramdecs 
    | 15 -> NONTERM_Paramdecs 
    | 16 -> NONTERM_Paramdecs1 
    | 17 -> NONTERM_Paramdecs1 
    | 18 -> NONTERM_Block 
    | 19 -> NONTERM_StmtOrDecSeq 
    | 20 -> NONTERM_StmtOrDecSeq 
    | 21 -> NONTERM_StmtOrDecSeq 
    | 22 -> NONTERM_Stmt 
    | 23 -> NONTERM_Stmt 
    | 24 -> NONTERM_StmtM 
    | 25 -> NONTERM_StmtM 
    | 26 -> NONTERM_StmtM 
    | 27 -> NONTERM_StmtM 
    | 28 -> NONTERM_StmtM 
    | 29 -> NONTERM_StmtM 
    | 30 -> NONTERM_StmtM 
    | 31 -> NONTERM_StmtM 
    | 32 -> NONTERM_Cases 
    | 33 -> NONTERM_Cases 
    | 34 -> NONTERM_Cases1 
    | 35 -> NONTERM_Cases1 
    | 36 -> NONTERM_Case 
    | 37 -> NONTERM_StmtU 
    | 38 -> NONTERM_StmtU 
    | 39 -> NONTERM_StmtU 
    | 40 -> NONTERM_StmtU 
    | 41 -> NONTERM_Expr 
    | 42 -> NONTERM_Expr 
    | 43 -> NONTERM_ExprNotAccess 
    | 44 -> NONTERM_ExprNotAccess 
    | 45 -> NONTERM_ExprNotAccess 
    | 46 -> NONTERM_ExprNotAccess 
    | 47 -> NONTERM_ExprNotAccess 
    | 48 -> NONTERM_ExprNotAccess 
    | 49 -> NONTERM_ExprNotAccess 
    | 50 -> NONTERM_ExprNotAccess 
    | 51 -> NONTERM_ExprNotAccess 
    | 52 -> NONTERM_ExprNotAccess 
    | 53 -> NONTERM_ExprNotAccess 
    | 54 -> NONTERM_ExprNotAccess 
    | 55 -> NONTERM_ExprNotAccess 
    | 56 -> NONTERM_ExprNotAccess 
    | 57 -> NONTERM_ExprNotAccess 
    | 58 -> NONTERM_ExprNotAccess 
    | 59 -> NONTERM_ExprNotAccess 
    | 60 -> NONTERM_ExprNotAccess 
    | 61 -> NONTERM_ExprNotAccess 
    | 62 -> NONTERM_ExprNotAccess 
    | 63 -> NONTERM_ExprNotAccess 
    | 64 -> NONTERM_ExprNotAccess 
    | 65 -> NONTERM_AtExprNotAccess 
    | 66 -> NONTERM_AtExprNotAccess 
    | 67 -> NONTERM_AtExprNotAccess 
    | 68 -> NONTERM_Access 
    | 69 -> NONTERM_Access 
    | 70 -> NONTERM_Access 
    | 71 -> NONTERM_Access 
    | 72 -> NONTERM_Access 
    | 73 -> NONTERM_Exprs 
    | 74 -> NONTERM_Exprs 
    | 75 -> NONTERM_Exprs1 
    | 76 -> NONTERM_Exprs1 
    | 77 -> NONTERM_Const 
    | 78 -> NONTERM_Const 
    | 79 -> NONTERM_Const 
    | 80 -> NONTERM_Const 
    | 81 -> NONTERM_Type 
    | 82 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 48 
let _fsyacc_tagOfErrorTerminal = 46

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | AMP  -> "AMP" 
  | COLON  -> "COLON" 
  | QUESTION  -> "QUESTION" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | INCR  -> "INCR" 
  | DECR  -> "DECR" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | CHAR  -> "CHAR" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | INT  -> "INT" 
  | NULL  -> "NULL" 
  | PRINT  -> "PRINT" 
  | PRINTLN  -> "PRINTLN" 
  | RETURN  -> "RETURN" 
  | VOID  -> "VOID" 
  | WHILE  -> "WHILE" 
  | FOR  -> "FOR" 
  | SWITCH  -> "SWITCH" 
  | CASE  -> "CASE" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 
  | CSTBOOL _ -> "CSTBOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | QUESTION  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | INCR  -> (null : System.Object) 
  | DECR  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | SWITCH  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;2us;65535us;0us;2us;4us;5us;2us;65535us;0us;4us;4us;4us;8us;65535us;0us;6us;4us;6us;25us;34us;29us;34us;35us;34us;37us;42us;40us;42us;43us;42us;4us;65535us;9us;11us;10us;11us;14us;15us;16us;17us;2us;65535us;0us;8us;4us;8us;2us;65535us;25us;26us;29us;30us;3us;65535us;25us;33us;29us;33us;35us;36us;10us;65535us;27us;28us;31us;32us;37us;54us;40us;54us;43us;54us;58us;54us;59us;54us;64us;54us;73us;54us;87us;88us;3us;65535us;37us;38us;40us;41us;43us;44us;4us;65535us;37us;40us;40us;40us;43us;40us;58us;90us;7us;65535us;37us;45us;40us;45us;43us;45us;58us;46us;59us;60us;64us;65us;73us;74us;1us;65535us;79us;80us;2us;65535us;79us;82us;83us;84us;2us;65535us;79us;83us;83us;83us;7us;65535us;37us;47us;40us;47us;43us;47us;58us;47us;59us;89us;64us;91us;73us;92us;36us;65535us;37us;48us;40us;48us;43us;48us;50us;52us;56us;57us;58us;48us;59us;48us;62us;63us;64us;48us;67us;68us;69us;70us;71us;72us;73us;48us;76us;77us;98us;99us;101us;126us;104us;105us;106us;107us;127us;109us;128us;110us;129us;111us;130us;112us;131us;113us;132us;114us;133us;115us;134us;116us;135us;117us;136us;118us;137us;119us;138us;120us;139us;121us;144us;123us;145us;124us;147us;122us;158us;125us;161us;126us;36us;65535us;37us;95us;40us;95us;43us;95us;50us;95us;56us;95us;58us;95us;59us;95us;62us;95us;64us;95us;67us;95us;69us;95us;71us;95us;73us;95us;76us;95us;98us;95us;101us;95us;104us;95us;106us;95us;127us;95us;128us;95us;129us;95us;130us;95us;131us;95us;132us;95us;133us;95us;134us;95us;135us;95us;136us;95us;137us;95us;138us;95us;139us;95us;144us;95us;145us;95us;147us;96us;158us;95us;161us;95us;37us;65535us;37us;97us;40us;97us;43us;97us;50us;97us;56us;97us;58us;97us;59us;97us;62us;97us;64us;97us;67us;97us;69us;97us;71us;97us;73us;97us;76us;97us;98us;97us;101us;97us;104us;97us;106us;97us;127us;97us;128us;97us;129us;97us;130us;97us;131us;97us;132us;97us;133us;97us;134us;97us;135us;97us;136us;97us;137us;97us;138us;97us;139us;97us;144us;97us;145us;97us;147us;97us;155us;157us;158us;97us;161us;97us;41us;65535us;37us;94us;40us;94us;43us;94us;50us;94us;56us;94us;58us;94us;59us;94us;62us;94us;64us;94us;67us;94us;69us;94us;71us;94us;73us;94us;76us;94us;98us;94us;101us;94us;104us;94us;106us;94us;127us;94us;128us;94us;129us;94us;130us;94us;131us;94us;132us;94us;133us;94us;134us;94us;135us;94us;136us;94us;137us;94us;138us;94us;139us;94us;140us;141us;142us;143us;144us;94us;145us;94us;147us;93us;149us;150us;152us;153us;155us;156us;158us;94us;161us;94us;1us;65535us;101us;102us;2us;65535us;101us;160us;161us;162us;37us;65535us;37us;146us;40us;146us;43us;146us;50us;146us;56us;146us;58us;146us;59us;146us;62us;146us;64us;146us;67us;146us;69us;146us;71us;146us;73us;146us;76us;146us;98us;146us;101us;146us;104us;146us;106us;146us;127us;146us;128us;146us;129us;146us;130us;146us;131us;146us;132us;146us;133us;146us;134us;146us;135us;146us;136us;146us;137us;146us;138us;146us;139us;146us;144us;146us;145us;146us;147us;146us;155us;146us;158us;146us;161us;146us;8us;65535us;0us;10us;4us;10us;25us;9us;29us;9us;35us;9us;37us;9us;40us;9us;43us;9us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;6us;9us;18us;23us;26us;29us;33us;44us;48us;53us;61us;63us;66us;69us;77us;114us;151us;189us;231us;233us;236us;274us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;1us;3us;1us;3us;1us;4us;1us;4us;1us;5us;1us;6us;2us;6us;13us;3us;6us;10us;11us;1us;7us;2us;7us;13us;1us;8us;3us;8us;10us;11us;1us;9us;3us;9us;10us;11us;1us;9us;2us;10us;11us;1us;10us;1us;11us;1us;11us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;13us;1us;13us;1us;13us;1us;13us;1us;15us;2us;16us;17us;1us;17us;1us;17us;1us;18us;1us;18us;1us;18us;1us;20us;1us;20us;1us;21us;1us;21us;1us;21us;1us;22us;3us;22us;28us;37us;1us;23us;15us;24us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;1us;24us;2us;25us;26us;1us;25us;15us;26us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;1us;26us;1us;27us;3us;28us;37us;38us;3us;28us;37us;38us;17us;28us;37us;38us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;3us;28us;37us;38us;2us;28us;37us;1us;28us;2us;29us;39us;2us;29us;39us;16us;29us;39us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;2us;29us;39us;1us;29us;2us;30us;40us;2us;30us;40us;16us;30us;40us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;2us;30us;40us;16us;30us;40us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;2us;30us;40us;16us;30us;40us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;2us;30us;40us;1us;30us;1us;31us;1us;31us;15us;31us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;1us;31us;1us;31us;1us;31us;1us;31us;1us;33us;2us;34us;35us;1us;35us;1us;36us;1us;36us;1us;36us;1us;36us;1us;37us;1us;38us;1us;39us;1us;40us;4us;41us;44us;69us;72us;3us;41us;44us;72us;1us;42us;2us;42us;66us;1us;43us;1us;44us;15us;44us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;2us;45us;68us;1us;45us;1us;45us;1us;45us;1us;46us;15us;46us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;1us;47us;15us;47us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;1us;48us;15us;49us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;15us;49us;50us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;15us;49us;50us;51us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;15us;49us;50us;51us;52us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;15us;49us;50us;51us;52us;53us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;15us;49us;50us;51us;52us;53us;54us;54us;55us;56us;57us;58us;59us;60us;61us;64us;15us;49us;50us;51us;52us;53us;54us;55us;55us;56us;57us;58us;59us;60us;61us;64us;15us;49us;50us;51us;52us;53us;54us;55us;56us;56us;57us;58us;59us;60us;61us;64us;15us;49us;50us;51us;52us;53us;54us;55us;56us;57us;57us;58us;59us;60us;61us;64us;15us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;58us;59us;60us;61us;64us;15us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;59us;60us;61us;64us;15us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;60us;61us;64us;15us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;61us;64us;14us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;15us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;64us;15us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;64us;15us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;72us;16us;49us;50us;51us;52us;53us;54us;55us;56us;57us;58us;59us;60us;61us;64us;75us;76us;1us;49us;1us;50us;1us;51us;1us;52us;1us;53us;1us;54us;1us;55us;1us;56us;1us;57us;1us;58us;1us;59us;1us;60us;1us;61us;1us;62us;2us;62us;72us;1us;63us;2us;63us;72us;1us;64us;1us;64us;1us;65us;2us;66us;69us;1us;66us;1us;67us;2us;67us;72us;1us;68us;1us;69us;2us;69us;72us;1us;69us;2us;70us;71us;2us;70us;72us;1us;71us;1us;72us;1us;72us;1us;74us;1us;76us;1us;76us;1us;77us;1us;78us;1us;79us;1us;79us;1us;80us;1us;81us;1us;82us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;16us;18us;20us;23us;27us;29us;32us;34us;38us;40us;44us;46us;49us;51us;53us;55us;57us;59us;61us;63us;65us;67us;69us;71us;73us;75us;77us;80us;82us;84us;86us;88us;90us;92us;94us;96us;98us;100us;102us;106us;108us;124us;126us;129us;131us;147us;149us;151us;155us;159us;177us;181us;184us;186us;189us;192us;209us;212us;214us;217us;220us;237us;240us;257us;260us;277us;280us;282us;284us;286us;302us;304us;306us;308us;310us;312us;315us;317us;319us;321us;323us;325us;327us;329us;331us;333us;338us;342us;344us;347us;349us;351us;367us;370us;372us;374us;376us;378us;394us;396us;412us;414us;430us;446us;462us;478us;494us;510us;526us;542us;558us;574us;590us;606us;622us;637us;653us;669us;685us;702us;704us;706us;708us;710us;712us;714us;716us;718us;720us;722us;724us;726us;728us;730us;733us;735us;738us;740us;742us;744us;747us;749us;751us;754us;756us;758us;761us;763us;766us;769us;771us;773us;775us;777us;779us;781us;783us;785us;787us;789us;791us;793us;|]
let _fsyacc_action_rows = 170
let _fsyacc_actionTableElements = [|3us;16386us;29us;169us;32us;168us;37us;23us;0us;49152us;1us;32768us;0us;3us;0us;16385us;3us;16386us;29us;169us;32us;168us;37us;23us;0us;16387us;1us;32768us;7us;7us;0us;16388us;0us;16389us;3us;32768us;1us;16us;26us;14us;43us;12us;3us;32768us;1us;16us;26us;14us;43us;13us;1us;16390us;5us;19us;0us;16391us;1us;16391us;1us;29us;3us;32768us;1us;16us;26us;14us;43us;12us;1us;16392us;5us;19us;3us;32768us;1us;16us;26us;14us;43us;12us;2us;32768us;2us;18us;5us;19us;0us;16393us;2us;32768us;6us;20us;44us;21us;0us;16394us;1us;32768us;6us;22us;0us;16395us;1us;32768us;43us;24us;1us;32768us;1us;25us;2us;16398us;29us;169us;32us;168us;1us;32768us;2us;27us;1us;32768us;3us;37us;0us;16396us;2us;16398us;29us;169us;32us;168us;1us;32768us;2us;31us;1us;32768us;3us;37us;0us;16397us;0us;16399us;1us;16400us;8us;35us;2us;32768us;29us;169us;32us;168us;0us;16401us;21us;16403us;1us;147us;3us;37us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;29us;169us;31us;55us;32us;168us;33us;167us;34us;106us;35us;108us;36us;50us;38us;61us;39us;66us;40us;75us;43us;100us;44us;163us;45us;164us;1us;32768us;4us;39us;0us;16402us;21us;16403us;1us;147us;3us;37us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;29us;169us;31us;55us;32us;168us;33us;167us;34us;106us;35us;108us;36us;50us;38us;61us;39us;66us;40us;75us;43us;100us;44us;163us;45us;164us;0us;16404us;1us;32768us;7us;43us;21us;16403us;1us;147us;3us;37us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;29us;169us;31us;55us;32us;168us;33us;167us;34us;106us;35us;108us;36us;50us;38us;61us;39us;66us;40us;75us;43us;100us;44us;163us;45us;164us;0us;16405us;0us;16406us;1us;16406us;30us;59us;0us;16407us;15us;32768us;7us;49us;12us;144us;14us;139us;15us;138us;16us;132us;17us;133us;18us;134us;19us;135us;20us;136us;21us;137us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;0us;16408us;14us;32768us;1us;147us;7us;51us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;0us;16409us;15us;32768us;7us;53us;12us;144us;14us;139us;15us;138us;16us;132us;17us;133us;18us;134us;19us;135us;20us;136us;21us;137us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;0us;16410us;0us;16411us;1us;32768us;1us;56us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;15us;32768us;2us;58us;12us;144us;14us;139us;15us;138us;16us;132us;17us;133us;18us;134us;19us;135us;20us;136us;21us;137us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;19us;32768us;1us;147us;3us;37us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;31us;55us;33us;167us;34us;106us;35us;108us;36us;50us;38us;61us;39us;66us;40us;75us;43us;100us;44us;163us;45us;164us;19us;32768us;1us;147us;3us;37us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;31us;55us;33us;167us;34us;106us;35us;108us;36us;50us;38us;61us;39us;66us;40us;75us;43us;100us;44us;163us;45us;164us;0us;16412us;1us;32768us;1us;62us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;15us;32768us;2us;64us;12us;144us;14us;139us;15us;138us;16us;132us;17us;133us;18us;134us;19us;135us;20us;136us;21us;137us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;19us;32768us;1us;147us;3us;37us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;31us;55us;33us;167us;34us;106us;35us;108us;36us;50us;38us;61us;39us;66us;40us;75us;43us;100us;44us;163us;45us;164us;0us;16413us;1us;32768us;1us;67us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;15us;32768us;7us;69us;12us;144us;14us;139us;15us;138us;16us;132us;17us;133us;18us;134us;19us;135us;20us;136us;21us;137us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;15us;32768us;7us;71us;12us;144us;14us;139us;15us;138us;16us;132us;17us;133us;18us;134us;19us;135us;20us;136us;21us;137us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;15us;32768us;2us;73us;12us;144us;14us;139us;15us;138us;16us;132us;17us;133us;18us;134us;19us;135us;20us;136us;21us;137us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;19us;32768us;1us;147us;3us;37us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;31us;55us;33us;167us;34us;106us;35us;108us;36us;50us;38us;61us;39us;66us;40us;75us;43us;100us;44us;163us;45us;164us;0us;16414us;1us;32768us;1us;76us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;15us;32768us;2us;78us;12us;144us;14us;139us;15us;138us;16us;132us;17us;133us;18us;134us;19us;135us;20us;136us;21us;137us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;1us;32768us;3us;79us;1us;16416us;41us;85us;1us;32768us;4us;81us;0us;16415us;0us;16417us;1us;16418us;41us;85us;0us;16419us;1us;32768us;44us;86us;1us;32768us;11us;87us;1us;32768us;3us;37us;0us;16420us;0us;16421us;0us;16422us;0us;16423us;0us;16424us;3us;16425us;2us;154us;5us;158us;9us;98us;2us;16425us;5us;158us;9us;98us;0us;16426us;1us;16426us;2us;148us;0us;16427us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;14us;16428us;12us;144us;14us;139us;15us;138us;16us;132us;17us;133us;18us;134us;19us;135us;20us;136us;21us;137us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;1us;16452us;1us;101us;13us;16457us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;1us;32768us;2us;103us;0us;16429us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;0us;16430us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;14us;16431us;12us;144us;14us;139us;15us;138us;16us;132us;17us;133us;18us;134us;19us;135us;20us;136us;21us;137us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;0us;16432us;3us;16433us;26us;129us;27us;130us;28us;131us;3us;16434us;26us;129us;27us;130us;28us;131us;0us;16435us;0us;16436us;0us;16437us;9us;16438us;18us;134us;19us;135us;20us;136us;21us;137us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;9us;16439us;18us;134us;19us;135us;20us;136us;21us;137us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;5us;16440us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;5us;16441us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;5us;16442us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;5us;16443us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;11us;16444us;16us;132us;17us;133us;18us;134us;19us;135us;20us;136us;21us;137us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;12us;16445us;15us;138us;16us;132us;17us;133us;18us;134us;19us;135us;20us;136us;21us;137us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;14us;32768us;12us;144us;14us;139us;15us;138us;16us;132us;17us;133us;18us;134us;19us;135us;20us;136us;21us;137us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;15us;32768us;11us;145us;12us;144us;14us;139us;15us;138us;16us;132us;17us;133us;18us;134us;19us;135us;20us;136us;21us;137us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;13us;16448us;14us;139us;15us;138us;16us;132us;17us;133us;18us;134us;19us;135us;20us;136us;21us;137us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;15us;32768us;6us;159us;12us;144us;14us;139us;15us;138us;16us;132us;17us;133us;18us;134us;19us;135us;20us;136us;21us;137us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;15us;16459us;8us;161us;12us;144us;14us;139us;15us;138us;16us;132us;17us;133us;18us;134us;19us;135us;20us;136us;21us;137us;24us;127us;25us;128us;26us;129us;27us;130us;28us;131us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;3us;32768us;1us;152us;26us;155us;43us;151us;1us;16446us;5us;158us;3us;32768us;1us;152us;26us;155us;43us;151us;1us;16447us;5us;158us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;0us;16449us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;0us;16450us;3us;32768us;1us;152us;26us;155us;43us;151us;1us;16451us;5us;158us;0us;16452us;3us;32768us;1us;152us;26us;155us;43us;151us;2us;32768us;2us;154us;5us;158us;0us;16453us;8us;32768us;1us;147us;10us;149us;25us;165us;26us;155us;33us;167us;43us;151us;44us;163us;45us;164us;1us;16454us;5us;158us;0us;16455us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;0us;16456us;0us;16458us;13us;32768us;1us;147us;10us;149us;13us;104us;22us;140us;23us;142us;25us;165us;26us;155us;33us;167us;34us;106us;35us;108us;43us;100us;44us;163us;45us;164us;0us;16460us;0us;16461us;0us;16462us;1us;32768us;44us;166us;0us;16463us;0us;16464us;0us;16465us;0us;16466us;|]
let _fsyacc_actionTableRowOffsets = [|0us;4us;5us;7us;8us;12us;13us;15us;16us;17us;21us;25us;27us;28us;30us;34us;36us;40us;43us;44us;47us;48us;50us;51us;53us;55us;58us;60us;62us;63us;66us;68us;70us;71us;72us;74us;77us;78us;100us;102us;103us;125us;126us;128us;150us;151us;152us;154us;155us;171us;172us;187us;188us;204us;205us;206us;208us;222us;238us;258us;278us;279us;281us;295us;311us;331us;332us;334us;348us;364us;378us;394us;408us;424us;444us;445us;447us;461us;477us;479us;481us;483us;484us;485us;487us;488us;490us;492us;494us;495us;496us;497us;498us;499us;503us;506us;507us;509us;510us;524us;539us;541us;555us;557us;558us;572us;573us;587us;602us;603us;607us;611us;612us;613us;614us;624us;634us;640us;646us;652us;658us;670us;683us;698us;714us;728us;744us;760us;774us;788us;802us;816us;830us;844us;858us;872us;886us;900us;914us;928us;942us;946us;948us;952us;954us;968us;982us;983us;997us;998us;1002us;1004us;1005us;1009us;1012us;1013us;1022us;1024us;1025us;1039us;1040us;1041us;1055us;1056us;1057us;1058us;1060us;1061us;1062us;1063us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;0us;2us;2us;1us;2us;1us;2us;3us;3us;4us;6us;6us;0us;1us;1us;3us;3us;0us;2us;3us;1us;1us;2us;2us;3us;1us;7us;5us;9us;7us;0us;1us;1us;2us;4us;7us;5us;5us;9us;1us;1us;1us;3us;4us;2us;2us;1us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;2us;2us;5us;1us;3us;2us;1us;3us;2us;2us;4us;0us;1us;1us;3us;1us;1us;2us;1us;1us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;3us;3us;4us;5us;5us;5us;5us;5us;6us;6us;7us;7us;8us;8us;9us;10us;10us;10us;11us;11us;12us;12us;12us;12us;12us;12us;12us;12us;13us;13us;14us;14us;15us;16us;16us;16us;16us;17us;17us;18us;18us;18us;18us;18us;18us;18us;18us;18us;18us;18us;18us;18us;18us;18us;18us;18us;18us;18us;18us;18us;18us;19us;19us;19us;20us;20us;20us;20us;20us;21us;21us;22us;22us;23us;23us;23us;23us;24us;24us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;65535us;16387us;65535us;16388us;16389us;65535us;65535us;65535us;16391us;65535us;65535us;65535us;65535us;65535us;16393us;65535us;16394us;65535us;16395us;65535us;65535us;65535us;65535us;65535us;16396us;65535us;65535us;65535us;16397us;16399us;65535us;65535us;16401us;65535us;65535us;16402us;65535us;16404us;65535us;65535us;16405us;16406us;65535us;16407us;65535us;16408us;65535us;16409us;65535us;16410us;16411us;65535us;65535us;65535us;65535us;65535us;16412us;65535us;65535us;65535us;65535us;16413us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16414us;65535us;65535us;65535us;65535us;65535us;65535us;16415us;16417us;65535us;16419us;65535us;65535us;65535us;16420us;16421us;16422us;16423us;16424us;65535us;65535us;16426us;65535us;16427us;65535us;65535us;65535us;65535us;65535us;16429us;65535us;65535us;65535us;65535us;16432us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16449us;65535us;16450us;65535us;65535us;16452us;65535us;65535us;16453us;65535us;65535us;16455us;65535us;16456us;16458us;65535us;16460us;16461us;16462us;65535us;16463us;16464us;16465us;16466us;|]
let _fsyacc_reductions = lazy [|
# 450 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.program in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startMain));
# 459 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Topdecs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "CPar.fsy"
                                                               Prog _1 
                   )
# 43 "CPar.fsy"
                 : Absyn.program));
# 470 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "CPar.fsy"
                                                               [] 
                   )
# 47 "CPar.fsy"
                 : 'gentype_Topdecs));
# 480 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Topdec in
            let _2 = parseState.GetInput(2) :?> 'gentype_Topdecs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "CPar.fsy"
                                                               _1 :: _2 
                   )
# 48 "CPar.fsy"
                 : 'gentype_Topdecs));
# 492 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "CPar.fsy"
                                                               Vardec (fst _1, snd _1) 
                   )
# 52 "CPar.fsy"
                 : 'gentype_Topdec));
# 503 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Fundec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "CPar.fsy"
                                                               _1 
                   )
# 53 "CPar.fsy"
                 : 'gentype_Topdec));
# 514 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Type in
            let _2 = parseState.GetInput(2) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "CPar.fsy"
                                                               ((fst _2) _1, snd _2) 
                   )
# 57 "CPar.fsy"
                 : 'gentype_Vardec));
# 526 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "CPar.fsy"
                                                               ((fun t -> t), _1)                      
                   )
# 61 "CPar.fsy"
                 : 'gentype_Vardesc));
# 537 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "CPar.fsy"
                                                               compose1 TypP _2                        
                   )
# 62 "CPar.fsy"
                 : 'gentype_Vardesc));
# 548 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "CPar.fsy"
                                                               _2                                      
                   )
# 63 "CPar.fsy"
                 : 'gentype_Vardesc));
# 559 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, None)) _1    
                   )
# 64 "CPar.fsy"
                 : 'gentype_Vardesc));
# 570 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardesc in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, Some _3)) _1 
                   )
# 65 "CPar.fsy"
                 : 'gentype_Vardesc));
# 582 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Paramdecs in
            let _6 = parseState.GetInput(6) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "CPar.fsy"
                                                               Fundec(None,     _2, _4, _6) 
                   )
# 69 "CPar.fsy"
                 : 'gentype_Fundec));
# 595 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Type in
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Paramdecs in
            let _6 = parseState.GetInput(6) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "CPar.fsy"
                                                               Fundec(Some(_1), _2, _4, _6) 
                   )
# 70 "CPar.fsy"
                 : 'gentype_Fundec));
# 609 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "CPar.fsy"
                                                               [] 
                   )
# 74 "CPar.fsy"
                 : 'gentype_Paramdecs));
# 619 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Paramdecs1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "CPar.fsy"
                                                               _1 
                   )
# 75 "CPar.fsy"
                 : 'gentype_Paramdecs));
# 630 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "CPar.fsy"
                                                               [_1]     
                   )
# 79 "CPar.fsy"
                 : 'gentype_Paramdecs1));
# 641 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardec in
            let _3 = parseState.GetInput(3) :?> 'gentype_Paramdecs1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 80 "CPar.fsy"
                 : 'gentype_Paramdecs1));
# 653 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_StmtOrDecSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "CPar.fsy"
                                                               Block _2 
                   )
# 84 "CPar.fsy"
                 : 'gentype_Block));
# 664 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "CPar.fsy"
                                                               [] 
                   )
# 88 "CPar.fsy"
                 : 'gentype_StmtOrDecSeq));
# 674 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Stmt in
            let _2 = parseState.GetInput(2) :?> 'gentype_StmtOrDecSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "CPar.fsy"
                                                               Stmt _1 :: _2 
                   )
# 89 "CPar.fsy"
                 : 'gentype_StmtOrDecSeq));
# 686 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardec in
            let _3 = parseState.GetInput(3) :?> 'gentype_StmtOrDecSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "CPar.fsy"
                                                               Dec (fst _1, snd _1) :: _3 
                   )
# 90 "CPar.fsy"
                 : 'gentype_StmtOrDecSeq));
# 698 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_StmtM in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "CPar.fsy"
                                                               _1 
                   )
# 94 "CPar.fsy"
                 : 'gentype_Stmt));
# 709 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_StmtU in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "CPar.fsy"
                                                               _1 
                   )
# 95 "CPar.fsy"
                 : 'gentype_Stmt));
# 720 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "CPar.fsy"
                                                               Expr(_1)             
                   )
# 99 "CPar.fsy"
                 : 'gentype_StmtM));
# 731 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "CPar.fsy"
                                                               Return None          
                   )
# 100 "CPar.fsy"
                 : 'gentype_StmtM));
# 741 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "CPar.fsy"
                                                               Return(Some(_2))     
                   )
# 101 "CPar.fsy"
                 : 'gentype_StmtM));
# 752 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "CPar.fsy"
                                                               _1                   
                   )
# 102 "CPar.fsy"
                 : 'gentype_StmtM));
# 763 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmtM in
            let _7 = parseState.GetInput(7) :?> 'gentype_StmtM in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 103 "CPar.fsy"
                 : 'gentype_StmtM));
# 776 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmtM in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 104 "CPar.fsy"
                 : 'gentype_StmtM));
# 788 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_Expr in
            let _7 = parseState.GetInput(7) :?> 'gentype_Expr in
            let _9 = parseState.GetInput(9) :?> 'gentype_StmtM in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "CPar.fsy"
                                                                        Forloop(_3, _5, _7, _9) 
                   )
# 105 "CPar.fsy"
                 : 'gentype_StmtM));
# 802 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _6 = parseState.GetInput(6) :?> 'gentype_Cases in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "CPar.fsy"
                                                                     Switch(_3, _6) 
                   )
# 106 "CPar.fsy"
                 : 'gentype_StmtM));
# 814 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "CPar.fsy"
                                     [] 
                   )
# 110 "CPar.fsy"
                 : 'gentype_Cases));
# 824 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Cases1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "CPar.fsy"
                                  _1 
                   )
# 111 "CPar.fsy"
                 : 'gentype_Cases));
# 835 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Case in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "CPar.fsy"
                              [_1] 
                   )
# 115 "CPar.fsy"
                 : 'gentype_Cases1));
# 846 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Case in
            let _2 = parseState.GetInput(2) :?> 'gentype_Cases1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "CPar.fsy"
                                       _1 :: _2 
                   )
# 116 "CPar.fsy"
                 : 'gentype_Cases1));
# 858 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            let _4 = parseState.GetInput(4) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "CPar.fsy"
                                                 Case(_2, _4) 
                   )
# 120 "CPar.fsy"
                 : 'gentype_Case));
# 870 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmtM in
            let _7 = parseState.GetInput(7) :?> 'gentype_StmtU in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 123 "CPar.fsy"
                 : 'gentype_StmtU));
# 883 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_Stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "CPar.fsy"
                                                               If(_3, _5, Block []) 
                   )
# 124 "CPar.fsy"
                 : 'gentype_StmtU));
# 895 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmtU in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 125 "CPar.fsy"
                 : 'gentype_StmtU));
# 907 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_Expr in
            let _7 = parseState.GetInput(7) :?> 'gentype_Expr in
            let _9 = parseState.GetInput(9) :?> 'gentype_StmtU in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "CPar.fsy"
                                                                        Forloop(_3, _5, _7, _9) 
                   )
# 126 "CPar.fsy"
                 : 'gentype_StmtU));
# 921 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "CPar.fsy"
                                                               Access _1           
                   )
# 130 "CPar.fsy"
                 : 'gentype_Expr));
# 932 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprNotAccess in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "CPar.fsy"
                                                               _1                  
                   )
# 131 "CPar.fsy"
                 : 'gentype_Expr));
# 943 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_AtExprNotAccess in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "CPar.fsy"
                                                               _1                  
                   )
# 135 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 954 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Access in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "CPar.fsy"
                                                               Assign(_1, _3)      
                   )
# 136 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 966 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_Exprs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "CPar.fsy"
                                                               Call(_1, _3)        
                   )
# 137 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 978 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "CPar.fsy"
                                                               Prim1("!", _2)      
                   )
# 138 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 989 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "CPar.fsy"
                                                               Prim1("printi", _2) 
                   )
# 139 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1000 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "CPar.fsy"
                                                               Prim1("printc", nl) 
                   )
# 140 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1010 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "CPar.fsy"
                                                               Prim2("+",  _1, _3) 
                   )
# 141 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1022 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "CPar.fsy"
                                                               Prim2("-",  _1, _3) 
                   )
# 142 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1034 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "CPar.fsy"
                                                               Prim2("*",  _1, _3) 
                   )
# 143 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1046 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "CPar.fsy"
                                                               Prim2("/",  _1, _3) 
                   )
# 144 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1058 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "CPar.fsy"
                                                               Prim2("%",  _1, _3) 
                   )
# 145 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1070 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "CPar.fsy"
                                                               Prim2("==", _1, _3) 
                   )
# 146 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1082 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "CPar.fsy"
                                                               Prim2("!=", _1, _3) 
                   )
# 147 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1094 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "CPar.fsy"
                                                               Prim2(">",  _1, _3) 
                   )
# 148 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1106 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "CPar.fsy"
                                                               Prim2("<",  _1, _3) 
                   )
# 149 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1118 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "CPar.fsy"
                                                               Prim2(">=", _1, _3) 
                   )
# 150 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1130 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "CPar.fsy"
                                                               Prim2("<=", _1, _3) 
                   )
# 151 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1142 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "CPar.fsy"
                                                               Ternary(_1, _3, CstI 0) 
                   )
# 152 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1154 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "CPar.fsy"
                                                               Ternary(_1, CstI 1, _3) 
                   )
# 153 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1166 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "CPar.fsy"
                                                               PreInc(_2)          
                   )
# 154 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1177 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "CPar.fsy"
                                                               PreDec(_2)          
                   )
# 155 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1188 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "CPar.fsy"
                                                               Ternary(_1, _3, _5) 
                   )
# 156 "CPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1201 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Const in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "CPar.fsy"
                                                               CstI _1             
                   )
# 160 "CPar.fsy"
                 : 'gentype_AtExprNotAccess));
# 1212 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprNotAccess in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "CPar.fsy"
                                                               _2                  
                   )
# 161 "CPar.fsy"
                 : 'gentype_AtExprNotAccess));
# 1223 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "CPar.fsy"
                                                               Addr _2             
                   )
# 162 "CPar.fsy"
                 : 'gentype_AtExprNotAccess));
# 1234 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "CPar.fsy"
                                                               AccVar _1           
                   )
# 166 "CPar.fsy"
                 : 'gentype_Access));
# 1245 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "CPar.fsy"
                                                               _2                  
                   )
# 167 "CPar.fsy"
                 : 'gentype_Access));
# 1256 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "CPar.fsy"
                                                               AccDeref (Access _2)
                   )
# 168 "CPar.fsy"
                 : 'gentype_Access));
# 1267 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_AtExprNotAccess in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "CPar.fsy"
                                                               AccDeref _2         
                   )
# 169 "CPar.fsy"
                 : 'gentype_Access));
# 1278 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Access in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "CPar.fsy"
                                                               AccIndex(_1, _3)    
                   )
# 170 "CPar.fsy"
                 : 'gentype_Access));
# 1290 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "CPar.fsy"
                                                               []       
                   )
# 174 "CPar.fsy"
                 : 'gentype_Exprs));
# 1300 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Exprs1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "CPar.fsy"
                                                               _1       
                   )
# 175 "CPar.fsy"
                 : 'gentype_Exprs));
# 1311 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "CPar.fsy"
                                                               [_1]     
                   )
# 179 "CPar.fsy"
                 : 'gentype_Exprs1));
# 1322 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Exprs1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 180 "CPar.fsy"
                 : 'gentype_Exprs1));
# 1334 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "CPar.fsy"
                                                               _1       
                   )
# 184 "CPar.fsy"
                 : 'gentype_Const));
# 1345 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "CPar.fsy"
                                                               _1       
                   )
# 185 "CPar.fsy"
                 : 'gentype_Const));
# 1356 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "CPar.fsy"
                                                               - _2     
                   )
# 186 "CPar.fsy"
                 : 'gentype_Const));
# 1367 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "CPar.fsy"
                                                               -1       
                   )
# 187 "CPar.fsy"
                 : 'gentype_Const));
# 1377 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "CPar.fsy"
                                                               TypI     
                   )
# 191 "CPar.fsy"
                 : 'gentype_Type));
# 1387 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "CPar.fsy"
                                                               TypC     
                   )
# 192 "CPar.fsy"
                 : 'gentype_Type));
|]
# 1398 "CPar.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 49;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program =
    engine lexer lexbuf 0 :?> _
